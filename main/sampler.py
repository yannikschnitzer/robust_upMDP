import pickle
import stormpy 

def load_samples(filename):
    with open(filename, 'rb') as f:
        data = pickle.load(f)
    return data[0], data[1]

def load_data(filename):
    with open(filename, 'rb') as f:
        data = pickle.load(f)
    return data

def save_data(filename, data):
    with open(filename, 'wb') as f:
        pickle.dump(data, f)

def gen_samples(model, N):
    # print("Num Samples:", N)
    # sample_array = [[0.869661074152221, 0.8661798728546303],
                    # [0.8628228067490115, 0.7951723834808841],
                    # [0.8620823631217877, 0.8714771565000735],
                    # [0.9125711960410308, 0.7818002418429729],
                    # [0.8664964122259171, 0.8960449627795338],
                    # [0.8207954625322589, 0.8478324770294388],
                    # [0.8446490767938636, 0.7811642917262241],
                    # [0.9191153719297983, 0.7936198699381651],
                    # [0.8864324321419775, 0.9398784811009875],
                    # [0.8072730371156094, 0.9214250405778299],
                    # [0.8420246149869187, 0.8972084444641392],
                    # [0.8142367177230883, 0.7645572236541063],
                    # [0.8535789801814365, 0.9292351353230426],
                    # [0.9404609671356791, 0.8981776326384185],
                    # [0.9389832926382342, 0.8688531847967902],
                    # [0.7788434399690806, 0.7766300925600227],
                    # [0.8655612875208566, 0.807913759226833],
                    # [0.9128951254260605, 0.9446908388879199],
                    # [0.9181904445042588, 0.8186386387017405],
                    # [0.8728675186314087, 0.8039202096577984],
                    # [0.8141614815010048, 0.9416018043926462],
                    # [0.894056609631649, 0.7803382945204862],
                    # [0.9462064773805487, 0.9432385806262048],
                    # [0.8662302942971775, 0.8359354135017256],
                    # [0.9454742779252265, 0.9327566945388481],
                    # [0.7891022521435348, 0.7940675455636694],
                    # [0.8478332331535391, 0.8464875591470622],
                    # [0.7560019550295863, 0.9075757972906222],
                    # [0.919733042652475, 0.8571301792542154],
                    # [0.776367088979513, 0.888508061753783],
                    # [0.8539588632425581, 0.9460041241195614],
                    # [0.8174110654953042, 0.839610145980437],
                    # [0.7809625724275472, 0.7883420718045608],
                    # [0.8962950766442683, 0.7802926338459671],
                    # [0.758057517063453, 0.9448165582495263],
                    # [0.8863605052592239, 0.9435688529419254],
                    # [0.8966147221187213, 0.9269095061000869],
                    # [0.9144542603216151, 0.9354983889793231],
                    # [0.8665000316611954, 0.8093972753701186],
                    # [0.8211059514261604, 0.7949595888993074],
                    # [0.7773432476768609, 0.9001380274688975],
                    # [0.9312926571008756, 0.7691136733637],
                    # [0.777831935573643, 0.9455121616980932],
                    # [0.9407532471901455, 0.8287119787494865],
                    # [0.93707401731815, 0.849280773022506],
                    # [0.86129116040779, 0.7874370910427937],
                    # [0.8761749704651074, 0.9132910983465249],
                    # [0.8882308317040237, 0.7607575455866953],
                    # [0.8035269051102294, 0.7703719057570444],
                    # [0.7541695967217074, 0.8023149107472405],
                    # [0.8739084093192329, 0.8729259607404543],
                    # [0.8153935594189515, 0.8896511402792422],
                    # [0.9393455984400545, 0.8251406907963449],
                    # [0.7808023107849057, 0.7961230804185307],
                    # [0.7887863970815752, 0.8024022572165067],
                    # [0.8379140887768536, 0.7821401352947365],
                    # [0.8839915545670884, 0.7884123168258372],
                    # [0.7564994535991607, 0.8664001552947421],
                    # [0.790647594031505, 0.7786707605674618],
                    # [0.7576181222118429, 0.8965876175117424],
                    # [0.7765583541314293, 0.8484018585740156],
                    # [0.9243102287160047, 0.929037329965087],
                    # [0.8028733313825461, 0.8636652873622469],
                    # [0.8999197414186468, 0.9481558393427307],
                    # [0.7696627449350127, 0.8263074789200674],
                    # [0.7710043977756637, 0.9089318698534582],
                    # [0.7937505668413533, 0.7865729594308228],
                    # [0.7640131064330025, 0.8696561703568575],
                    # [0.8945685836323555, 0.9316092560536077],
                    # [0.8983882218249633, 0.7970101459490133],
                    # [0.9428958868773423, 0.8637631187357111],
                    # [0.8334767460907865, 0.8719718042570912],
                    # [0.8876999313960762, 0.8194797983401028],
                    # [0.8226111348988409, 0.8025265578131713],
                    # [0.9178967584965603, 0.847781213628355],
                    # [0.9449466771184044, 0.7579594678705677],
                    # [0.9386995544070273, 0.7667129265196834],
                    # [0.8241194113323729, 0.8795446187165159],
                    # [0.9463263502874981, 0.8468138470835735],
                    # [0.8625146375357325, 0.8937363884968075]]
    
    # samples = []

    # for pair in sample_array:
    #     print("Pair:",pair)
    #     point = dict()
    #     i = 0
    #     for e in model.params:
    #         point[e] = stormpy.RationalRF(pair[i])
    #         print(e, pair[i])
    #         i += 1
    #     rational_parameter_assignments = dict(
    #         [[x, val] for x, val in point.items()])
    #     samples.append(rational_parameter_assignments)
    # print("Hallo")
    samples = [model.param_sampler() for j in range(N)]
    return samples

def get_samples(args):
    if args["sample_load_file"] is not None:
        samples = load_samples(args["sample_load_file"])
    else:
        samples = gen_samples(args["model"], args["num_samples"])
    if args["sample_save_file"] is not None:
        save_data(args["sample_save_file"], samples)
    return samples
